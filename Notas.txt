*******ORDENAMIENTO DE CÓDIGO:*******
1.- Importación de módulos 
2.- Declaración de variables
3.- Declaración de funciones
4.- Ejecución de código

------------------------------------------------------------------------

las variables deben comenzar con:

una letra
un signo de $
un guion bajo _
**NUNCA** empezar con numeros ó caracteres especiales.

.................................................................................

Recomendaciones para buenas prácticas:

+ usar snake_case (uso de pisobajo) para archivos:
mi_archivo_javascript.js
------------------
+ usar UPPER_CASE (todas mayúsculas) en constantes:
const UNA_CONSTANTE = 'soy una constante'
------------------ 
+ usar UpperCamelCase (todas las primeras letras en mayúscula) en clases:
class SerHumano {
    constructor(nombre, genero){
        this.nombre = nombre
        this.genero = genero
    }
}
------------------
+ usar lowerCamelCase (primera minuscula después las que vengan mayusculas) en Objetos, Funciones, Primitivos, instancias:

objetos:
const unObjeto = {
    nombre:'Jonathan'
}

primitivos:
let unaCadena = 'HOla',
    unNumero = 19,
    unBoolean = true

funciones:
function holaMundo(nombre) {
  alert(`Hola mundo ${nombre}`);
}
holaMundo("Jonathan");

instancias:
const ajax = new XMLHttpRequest(),
  jon = new SerHumano("Jonathan", "Hombre");

...........................................................................................
...........................................................................................
Tipos de datos:

Primitivos: Se accede directamente al valor.

    string
    number
    boolean
    null
    undefined
    NaN

Compuestos: Se accede a la referencia del valor.

    object = {}
    array = []
    function () { }
    Class {}
    etc.


...........................................................................................
...........................................................................................

VARIABLES: 
 
 constantes: no cambian
 const NUMERO = 3 
 recordar que se usa UPPER_CASE

 Let: solo cambia en el ámbito (scoope) donde la asignemos
        No se puede reasignar un mismo variable con let ya que generaria un error de sintaxys. systaxError: ....

 function saludar (nombre){
    let saludo = 'HOla';
    let saludo = 'chao';
    console.log(saludar) //el resultado seria un error: systaxError: ....
 }

    ** PERO ** si la declaramos en otro scoope si es valido ejemplo:

    function saludar(nombre){
        let saludo = 'hola';
        if(nombre === 'sasha'){
            let saludo = 'chao';  //esta seria la declaracion de la misma variable en otro scoope 
            console.log('Acá la prueba: ' +saludo)
        }
    }



 var: para declarar una variable global.
 se puede declarar una variable con var y reasignarla sin inconveniente ejemplo:
 function saludar (nombre){
    var saludo = 'HOla';
    var saludo = 'chao';
    console.log(saludar) //el resultado será chao
 }




Conclusion:

* las variables con var puden ser redeclaradas

* las varibles con let NO puden ser redeclaradas ya que generaria un error de syntax, lo que si es posible es redeclararla dentro de otro scoope como en el ejemplo de arriba. 

las declaraciones con let y var si se declaran vacias, generará un undefined; en cambio con const no se puede hacer, porque no se podria después dar algun valor:

var nombre; //undefined
let nombre; //undefined
const NOMBRE; //no dejaria agregarle un valor más adelante. 


* NO se pueden redeclarar variables con const, esto genrearia error de syntax.


Es "recomendable usar let que var"
el problema es la compatibilidad con los buscadores antiguos. (let, const), pero si compila con babel esto se soluciona.
 


...........................................................................................
...........................................................................................


***Tipos de salida***


    Writing into an HTML element, using innerHTML. //Muestra en Html el mensaje deseado
    Writing into the HTML output using document.write().
    Writing into an alert box, using window.alert().  //Muestra una ventana de alerta con el mensaje deseado
    Writing into the browser console, using console.log(). // Muestra en la consola la salida esperada 
    <button onclick="window.print()">Print this page</button> // imprime un pdf

---
con innerHTML se imprime directamente en el html
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>
----
con window.alert()
<p>My first paragraph.</p>

<script>
window.alert(5 + 6);
</script>
----
con console.log
<script>
console.log(5 + 6);
</script>
----
IMPRIMIR UN PDF

<button onclick="window.print()">Print this page</button>

...........................................................................................
...........................................................................................

Cadenas (String):

manera formal:
let saludo = new String('hola');
esta manera de utilizar su constructor (String) es poco utilizada

manera simplificada:
let nombre = 'Noel';

métodos:
let nombre:"noel";
let apellido:"tejeda";
let saludo = new String('hola');
let lorem = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Velit rerum odio magnam?"

console.log(nombre,apellido,saludo)
console.log(nombre.length,
            apellido.length,
            saludo.length,
            nombre.toUpperCase(),
            apellido.toLowerCase(),
            lorem.includes("amet")
            );


.length = indica el número de caracteres
.toUpperCase= transforma el texto a mayúscula	
.toLowerCase= transforma el texto en minúscula
.includes= devuelve true ó false si se encuentra la palabra en el texto. 

...........................................................................................
...........................................................................................

Concatenación:

Existen 2 maneras 
1) usando el operador +

let nombre = 'noel';
let apellido = 'tejeda';
console.log('mi nombre es '+" "+nombre+" "+apellido)

2) y la otra es la interpolación de varibles:

********** Template String: **********************

console.log (`mi nombre es ${nombre} ${apellido}`)


Nota: antes de emacscript6 para hacer saltos de linea habia que usar: \n   ejemplo:
console.log ('linea 1 de texto\n'+
'\y linea 2 de texto');

pero ahora con los template string se hace así:

console.log (`linea 1 de texto 
y linea 2 de texto`);

y el resultado es el mismo, pero con la ventaja que no se usa concatenación ni salto de linea.


pero es importante saber que se deben usar las backstick (comillas invertidas alt+96) y hasta se ve mucho mejor que usando el operador +

En caso de querer escapar una comilla o tilde invertida en una plantilla literal, se debe poner una barra invertida (\) antes de la comilla o tilde invertida. ejemplo:
                                `\`` === '`' // --> true (cierto)


...........................................................................................
...........................................................................................

Números:

**toFixed ó redondeo**

para mostrar la cantidad de decimales que queramos se usa: toFixed(3)     muestra 3 decimales.  ejemplo:

let a = 5;
let b = 3;
resultado= a/b;
console.log(resultado.toFixed(4));
console.log(typeof resultado);

el resultado será: 1.6667

si no le coloco la cantidad de decimales a mostrar lo que hará es redondear la cantidad más cercana.  y retornará un tipo de dato de tipo String.

console.log(parseInt(resultado))  //solo devolverá la parte entera, sin los decimales.


*** transformar String a numero ***

let a= 2;  // numero
let b = "2.2"  // String
console.log(a+parseFloat(b))   //cambio de string a float. es lo que se llama como casting.

casting: un casting (o cast) sirve para cambiar el tipo de dato del valor resultante de una expresión.


...........................................................................................
...........................................................................................

*** Funciones ****  

* Funciones Expresadas
* Funciones Declaradas

Una funcion es un bloque de código, autocontenido, qud se puede definir una vez y ejecutar en cualquier momento. opcionalmente, una función puede aceptar parámetros separados por comas (,) y devolver un valor.

Las funciones JavaScript son objetos.

--*Funciones Declaradas*--

Una función declarada puede invocarse en cualquier parte de nuestro código incluso antes de que la funcion sea declarada.
Una función es "declarada" cuando el enunciado empieza con la palabra clave function ejemplo:

function saludar(nombre, edad){
    console.log(`Hola mi nombre es ${nombre} y tengo ${edad} años `);
}
saludar("Noel", 40)


--*Funciones Expresadas*--

en la creación de una función expresada no es necesario colocarle un nombre a la función. (también llamada función anónima)
para la creación de funciones expresadas es recomendable usar const y no let
para invocar una función expresada obligatoriamente debe ser después de inicializada, si se invoca antes arrojará un error: Uncaught ReferenceError...

//función anónima
const funcionExpresada = function(){
    console.log("mensaje de prueba")
}

funcionExpresada();


**** Conclusión ****

- una función es declarada cuando el enunciado empieza con la palabra clave function. 
- en la función declarativa se puede invocar antes ó después de haberse inicializado.
- una función expresada es necesario que primero sea inicializada y despúes invocada (antes NO)
- a una función expresada también se le llama función anónima, porque no se le coloca nombre, pero mayormente es inicializada como una variable constante.


...........................................................................................
...........................................................................................

*** Arrays ****  [ arrays ]

los arreglos o matrices se usan para almacenar una lista de manera ordenada de elementos, bajo un solo nombre de variable.

se describen como objetos tipo lista.

si no tuvieramos matrices tendriamos que almacenar cada elemento en un avariable separada.

una matriz que se encuentra dentro de otra se le llama matriz multidimensional ejemplo:

let random = ['tree', 795, [0, 1, 2]];
random[2][2]; //primer corchete accede a la matriz random, el segundo par de corchetes accedemos a la siguiente matriz.


algunos metodos para acceder a las matrices son:

push :  incluir uno o más elementos que desees agregas al final de tu matriz
pop : Eliminar el último elemento de una matriz es tan simple como ejecutar pop() en ella

...........................................................................................
...........................................................................................






